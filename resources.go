// Code generated by go-bindata.
// sources:
// ../go-astilectron-demo/resources/app/index.html
// ../go-astilectron-demo/resources/app/static/css/base.css
// ../go-astilectron-demo/resources/app/static/js/index.js
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAppIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\x3f\x4f\x03\x31\x0c\xc5\xf7\xfb\x14\xc6\x13\x0c\x34\x2b\x12\x49\x16\xfe\x88\x0d\x86\x32\x30\xba\x39\xc3\xe5\xea\xa6\x55\x6c\xa1\xde\xb7\x47\x21\xa7\x4a\xf5\x62\xe9\xf9\xbd\x9f\x9e\xec\x6f\x9e\xdf\x9f\xb6\x5f\x1f\x2f\x30\xd9\x41\xe2\xe0\xdb\x02\xa1\xf2\x13\x90\x0b\x36\x81\x69\x8c\x03\x00\x80\x3f\xb0\x11\xa4\x89\xaa\xb2\x05\xfc\xdc\xbe\xde\x3f\xe0\x7a\x92\x5c\xf6\x50\x59\x02\xaa\x2d\xc2\x3a\x31\x1b\xc2\x54\xf9\xbb\x29\x64\x39\xb9\xa4\xea\x76\xa4\xbc\x49\xaa\xe8\xe2\xe0\x5d\x47\xfb\xdd\x71\x5c\x20\x09\xa9\x06\x1c\xa9\xee\x57\xe6\x1b\x8b\x1c\x3b\x5d\x53\xcd\x27\x03\xad\xe9\x42\x9b\xd5\xe5\x32\xf2\x79\x33\x2b\x46\xef\xba\x23\x5e\xd9\x6d\x39\x71\x40\xe3\xb3\xb9\x99\x7e\xa9\xab\x2b\xbc\x4d\xcf\xe7\x92\xed\xf6\xee\xb1\x27\x2f\x1c\xef\x5a\xab\xff\x92\xed\x2f\x7f\x01\x00\x00\xff\xff\xc6\x45\xa4\xad\x27\x01\x00\x00")

func resourcesAppIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppIndexHtml,
		"resources/app/index.html",
	)
}

func resourcesAppIndexHtml() (*asset, error) {
	bytes, err := resourcesAppIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app/index.html", size: 295, mode: os.FileMode(420), modTime: time.Unix(1503320306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAppStaticCssBaseCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcd\xbd\x0e\xc2\x20\x14\xc5\xf1\x9d\xa7\x38\x89\x71\x53\x43\x65\xc3\xa7\xa1\xbd\xf2\x91\x52\x68\x08\x46\x8d\xe9\xbb\x9b\xf6\xca\xe0\xd0\x30\xf1\x4f\x7e\xe7\xfa\x3a\xc5\x13\xfa\x4c\x6f\x7c\x04\x00\xf8\x7b\x70\xbe\x6a\x74\x52\x1e\x6f\x5b\x99\x4c\x71\x21\x69\x48\xfe\xce\x86\x28\x24\xa7\x71\x95\xf3\x8b\xd3\x33\x50\xf5\x8d\x2c\x42\x5c\xc8\x94\xf1\xb7\xd7\x9b\x61\x74\x25\x3f\x12\x9d\x87\x1c\x73\xd1\x38\x28\xa5\xd8\xb5\x60\xad\x65\x17\xd7\xdb\xfb\xd0\x76\xeb\xfb\xb7\xdb\xd8\xf2\x0d\x00\x00\xff\xff\x05\x8a\x66\xd0\xc7\x00\x00\x00")

func resourcesAppStaticCssBaseCssBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppStaticCssBaseCss,
		"resources/app/static/css/base.css",
	)
}

func resourcesAppStaticCssBaseCss() (*asset, error) {
	bytes, err := resourcesAppStaticCssBaseCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app/static/css/base.css", size: 199, mode: os.FileMode(420), modTime: time.Unix(1503320208, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAppStaticJsIndexJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\x31\x6e\xc3\x30\x0c\xdc\xf3\x0a\x22\x4b\x6c\x20\x55\xf6\x18\x19\xbb\x15\x5d\x32\x74\xa6\x25\xa6\x15\x2a\x4b\x85\xc8\xa4\x35\x0a\xff\xbd\xb0\x62\x0b\x8e\xed\x72\x91\xc0\xbb\xe3\xf1\xa4\x1b\x46\xb0\xde\xd0\x0f\x9c\xe0\x77\x03\x00\x60\xbd\x95\x23\x5c\xae\x5e\x8b\x0d\xbe\x28\x87\x76\x5f\x87\x03\xbc\xa1\x15\xb8\x84\x08\xc8\x62\x1d\x69\x89\xc1\x83\x04\xa8\x09\x22\xa1\x69\x33\xd7\x04\x7d\x6d\xc8\x8b\x42\x63\x9e\x6f\xe4\xe5\xc5\xb2\x90\xa7\x58\xec\x26\xd2\xa7\x24\xda\xed\xd7\xfd\x06\xcf\xbb\xf2\xa1\x9b\x56\x56\x2e\x01\x45\x59\x65\xac\x2b\xd3\xb5\xdb\xa7\xe3\x8e\xff\x13\x66\xb2\xc5\x38\x28\xf3\x1a\x62\xc6\x77\x9a\xef\xc2\xdf\x56\xf4\x07\x8c\xb0\xf2\xd8\x2c\x38\x7d\x69\x64\x82\x2d\x93\x28\x96\xd6\xd1\xf6\xb8\x60\xcc\x33\x9c\x49\xce\x3d\x35\x3b\x57\xab\x92\x3a\x12\x7e\x3e\x42\xdd\x24\x7b\xb5\x0c\x3f\x0e\x9e\x3c\xc2\x4a\xb8\xfc\x59\x75\x30\xad\xd2\x0e\x99\x5f\xb1\x21\x38\xc1\x18\xf5\x0b\x5b\x17\xd0\x0c\x0e\x9b\xae\xfa\x0b\x00\x00\xff\xff\xd4\x08\x76\x83\x39\x02\x00\x00")

func resourcesAppStaticJsIndexJsBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppStaticJsIndexJs,
		"resources/app/static/js/index.js",
	)
}

func resourcesAppStaticJsIndexJs() (*asset, error) {
	bytes, err := resourcesAppStaticJsIndexJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app/static/js/index.js", size: 569, mode: os.FileMode(420), modTime: time.Unix(1503320410, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/app/index.html":          resourcesAppIndexHtml,
	"resources/app/static/css/base.css": resourcesAppStaticCssBaseCss,
	"resources/app/static/js/index.js":  resourcesAppStaticJsIndexJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"app": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{resourcesAppIndexHtml, map[string]*bintree{}},
			"static": &bintree{nil, map[string]*bintree{
				"css": &bintree{nil, map[string]*bintree{
					"base.css": &bintree{resourcesAppStaticCssBaseCss, map[string]*bintree{}},
				}},
				"js": &bintree{nil, map[string]*bintree{
					"index.js": &bintree{resourcesAppStaticJsIndexJs, map[string]*bintree{}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
